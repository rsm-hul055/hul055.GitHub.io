---
title: "Multinomial Logit Model"
author: "Hui Liu"
date: today
jupyter: python3
callout-appearance: minimal 
---


This assignment explores two methods for estimating the MNL model: (1) via Maximum Likelihood, and (2) via a Bayesian approach using a Metropolis-Hastings MCMC algorithm. 


## 1. Likelihood for the Multi-nomial Logit (MNL) Model

Suppose we have $i=1,\ldots,n$ consumers who each select exactly one product $j$ from a set of $J$ products. The outcome variable is the identity of the product chosen $y_i \in \{1, \ldots, J\}$ or equivalently a vector of $J-1$ zeros and $1$ one, where the $1$ indicates the selected product. For example, if the third product was chosen out of 3 products, then either $y=3$ or $y=(0,0,1)$ depending on how we want to represent it. Suppose also that we have a vector of data on each product $x_j$ (eg, brand, price, etc.). 

We model the consumer's decision as the selection of the product that provides the most utility, and we'll specify the utility function as a linear function of the product characteristics:

$$ U_{ij} = x_j'\beta + \epsilon_{ij} $$

where $\epsilon_{ij}$ is an i.i.d. extreme value error term. 

The choice of the i.i.d. extreme value error term leads to a closed-form expression for the probability that consumer $i$ chooses product $j$:

$$ \mathbb{P}_i(j) = \frac{e^{x_j'\beta}}{\sum_{k=1}^Je^{x_k'\beta}} $$

For example, if there are 3 products, the probability that consumer $i$ chooses product 3 is:

$$ \mathbb{P}_i(3) = \frac{e^{x_3'\beta}}{e^{x_1'\beta} + e^{x_2'\beta} + e^{x_3'\beta}} $$

A clever way to write the individual likelihood function for consumer $i$ is the product of the $J$ probabilities, each raised to the power of an indicator variable ($\delta_{ij}$) that indicates the chosen product:

$$ L_i(\beta) = \prod_{j=1}^J \mathbb{P}_i(j)^{\delta_{ij}} = \mathbb{P}_i(1)^{\delta_{i1}} \times \ldots \times \mathbb{P}_i(J)^{\delta_{iJ}}$$

Notice that if the consumer selected product $j=3$, then $\delta_{i3}=1$ while $\delta_{i1}=\delta_{i2}=0$ and the likelihood is:

$$ L_i(\beta) = \mathbb{P}_i(1)^0 \times \mathbb{P}_i(2)^0 \times \mathbb{P}_i(3)^1 = \mathbb{P}_i(3) = \frac{e^{x_3'\beta}}{\sum_{k=1}^3e^{x_k'\beta}} $$

The joint likelihood (across all consumers) is the product of the $n$ individual likelihoods:

$$ L_n(\beta) = \prod_{i=1}^n L_i(\beta) = \prod_{i=1}^n \prod_{j=1}^J \mathbb{P}_i(j)^{\delta_{ij}} $$

And the joint log-likelihood function is:

$$ \ell_n(\beta) = \sum_{i=1}^n \sum_{j=1}^J \delta_{ij} \log(\mathbb{P}_i(j)) $$



## 2. Simulate Conjoint Data

We will simulate data from a conjoint experiment about video content streaming services. We elect to simulate 100 respondents, each completing 10 choice tasks, where they choose from three alternatives per task. For simplicity, there is not a "no choice" option; each simulated respondent must select one of the 3 alternatives. 

Each alternative is a hypothetical streaming offer consistent of three attributes: (1) brand is either Netflix, Amazon Prime, or Hulu; (2) ads can either be part of the experience, or it can be ad-free, and (3) price per month ranges from \$4 to \$32 in increments of \$4.

The part-worths (ie, preference weights or beta parameters) for the attribute levels will be 1.0 for Netflix, 0.5 for Amazon Prime (with 0 for Hulu as the reference brand); -0.8 for included adverstisements (0 for ad-free); and -0.1*price so that utility to consumer $i$ for hypothethical streaming service $j$ is 

$$
u_{ij} = (1 \times Netflix_j) + (0.5 \times Prime_j) + (-0.8*Ads_j) - 0.1\times Price_j + \varepsilon_{ij}
$$

where the variables are binary indicators and $\varepsilon$ is Type 1 Extreme Value (ie, Gumble) distributed.

## 3. Preparing the Data for Estimation

The "hard part" of the MNL likelihood function is organizing the data, as we need to keep track of 3 dimensions (consumer $i$, covariate $k$, and product $j$) instead of the typical 2 dimensions for cross-sectional regression models (consumer $i$ and covariate $k$). The fact that each task for each respondent has the same number of alternatives (3) helps.  In addition, we need to convert the categorical variables for brand and ads into binary variables.

:::: {.callout-note collapse="true"}
```{python echo=False}
import pandas as pd

df = pd.read_csv("./conjoint_data.csv")

df.info(), df.head()
```
::::

# Data Summary

| Column   | Description                                                   |
|----------|---------------------------------------------------------------|
| `resp`   | Respondent ID                                                 |
| `task`   | Task number answered by each respondent (3 options per task)  |
| `choice` | Whether the option was chosen (1 = chosen, 0 = not chosen)    |
| `brand`  | Brand (categorical: N, H, P)                                  |
| `ad`     | Whether the product has advertising (Yes/No)                  |
| `price`  | Product price                                                 |

# One-hot Encode Categorical Variables
```{python}
# One-hot encode brand and ad
df_encoded = pd.get_dummies(df, columns=["brand", "ad"], drop_first=True)

# Check if each (resp, task) pair has 3 alternatives
group_counts = df_encoded.groupby(['resp', 'task']).size().value_counts()

# Preview reshaped data
df_encoded.head(), group_counts
```

We one-hot encode the categorical variables brand and ad to prepare them for use in the multinomial logit model, which requires numeric input features.
We also confirm that each respondent-task pair includes exactly 3 alternatives, ensuring proper setup for MNL estimation.
# The dataset is now encoded and validated, ready for modeling.

## 4. Estimation via Maximum Likelihood

## 4. Estimation via Maximum Likelihood

We estimate the parameters of the multinomial logit (MNL) model using maximum likelihood, via `scipy.optimize.minimize` with the BFGS method.

The log-likelihood function is constructed over respondent-task-choice groups, treating the utility of each product as a linear function of the features:

$$
U_{ij} = X_{ij} \beta
$$

We compute the negative log-likelihood, then solve for parameter estimates by minimizing this objective. We also compute the inverse Hessian to obtain standard errors and 95% confidence intervals.

::: {.callout-note title="Maximum Likelihood Estimation Results"}

```{python echo=False}
import numpy as np
import pandas as pd
from scipy.optimize import minimize
from numpy.linalg import inv

# Load and encode data
df = pd.read_csv("./conjoint_data.csv")
df_encoded = pd.get_dummies(df, columns=["brand", "ad"], drop_first=True)

# Define X and y
X = df_encoded[["price", "brand_N", "brand_P", "ad_Yes"]].values
y = df_encoded["choice"].values
groups = df_encoded[["resp", "task"]].values

# Ensure 3 alternatives per task
group_sizes = pd.DataFrame(groups, columns=["resp", "task"]).value_counts().values
assert all(group_sizes == 3)

# Reshape
X_grouped = X.reshape((-1, 3, X.shape[1]))
y_grouped = y.reshape((-1, 3))

# Ensure correct types
X_grouped = np.asarray(X_grouped, dtype=np.float64)
y_grouped = np.asarray(y_grouped, dtype=np.float64)

# Define log-likelihood
def neg_log_likelihood(beta):
    beta = np.asarray(beta, dtype=np.float64)
    utilities = np.dot(X_grouped, beta)  # Shape: (N_tasks, 3)
    exp_util = np.exp(utilities)
    probs = exp_util / exp_util.sum(axis=1, keepdims=True)
    chosen_probs = (probs * y_grouped).sum(axis=1)
    log_likelihood = np.log(chosen_probs + 1e-12).sum()
    return -log_likelihood

# Estimate
beta0 = np.zeros(X.shape[1])
result = minimize(neg_log_likelihood, beta0, method="BFGS")
beta_hat = result.x
hessian_inv = result.hess_inv

# Standard errors and confidence intervals
se = np.sqrt(np.diag(hessian_inv))
ci_lower = beta_hat - 1.96 * se
ci_upper = beta_hat + 1.96 * se

# Output results
results_df = pd.DataFrame({
    "Parameter": ["price", "brand_N", "brand_P", "ad_Yes"],
    "Estimate": beta_hat,
    "Std. Error": se,
    "95% CI Lower": ci_lower,
    "95% CI Upper": ci_upper
})
results_df
```
:::
# Interpretation:
Price has a statistically significant negative coefficient, confirming that higher prices reduce the probability of selection.

Brand_N and Brand_P have positive coefficients, suggesting they are preferred over the reference brand (likely Brand H).

Advertising (ad_Yes) has a negative coefficient, indicating that advertising may reduce product utility in this context.

## 5. Estimation via Bayesian Methods

_todo: code up a metropolis-hasting MCMC sampler of the posterior distribution. Take 11,000 steps and throw away the first 1,000, retaining the subsequent 10,000._

_hint: Use N(0,5) priors for the betas on the binary variables, and a N(0,1) prior for the price beta._

_hint: instead of calculating post=lik*prior, you can work in the log-space and calculate log-post = log-lik + log-prior (this should enable you to re-use your log-likelihood function from the MLE section just above)_

_hint: King Markov (in the video) use a candidate distribution of a coin flip to decide whether to move left or right among his islands.  Unlike King Markov, we have 4 dimensions (because we have 4 betas) and our dimensions are continuous.  So, use a multivariate normal distribution to pospose the next location for the algorithm to move to. I recommend a MNV(mu, Sigma) where mu=c(0,0,0,0) and sigma has diagonal values c(0.05, 0.05, 0.05, 0.005) and zeros on the off-diagonal.  Since this MVN has no covariances, you can sample each dimension independently (so 4 univariate normals instead of 1 multivariate normal), where the first 3 univariate normals are N(0,0.05) and the last one if N(0,0.005)._


_todo: for at least one of the 4 parameters, show the trace plot of the algorithm, as well as the histogram of the posterior distribution._

_todo: report the 4 posterior means, standard deviations, and 95% credible intervals and compare them to your results from the Maximum Likelihood approach._



## 6. Discussion

_todo: Suppose you did not simulate the data. What do you observe about the parameter estimates? What does $\beta_\text{Netflix} > \beta_\text{Prime}$ mean? Does it make sense that $\beta_\text{price}$ is negative?_

_todo: At a high level, discuss what change you would need to make in order to simulate data from --- and estimate the parameters of --- a multi-level (aka random-parameter or hierarchical) model. This is the model we use to analyze "real world" conjoint data._










